{"ast":null,"code":"//Rest APIs for product\n\nexport const fetchAllProducts = accessToken => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/products', {\n    method: 'GET',\n    headers: {\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.json().then(json => {\n      if (response.ok) {\n        promiseResolveRef({\n          data: json,\n          response: response\n        });\n      } else {\n        promiseRejectRef({\n          reason: \"Server error occurred.\",\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred.\",\n      response: err\n    });\n  });\n  return promise;\n};\nexport const createProduct = (requestJson, accessToken) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/products', {\n    method: 'POST',\n    body: JSON.stringify(requestJson),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.text().then(json => {\n      if (response.ok) {\n        promiseResolveRef({\n          message: \"Product \" + requestJson.name + \" added successfully.\",\n          response: response\n        });\n      } else {\n        let message = json.message;\n        if (message === undefined || message === null) {\n          message = \"Server error occurred. Please try again.\";\n        }\n        promiseRejectRef({\n          reason: message,\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred. Please try again.\",\n      response: err\n    });\n  });\n  return promise;\n};\nexport const deleteProduct = (id, accessToken) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/products/' + id, {\n    method: 'DELETE',\n    headers: {\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.text().then(() => {\n      if (response.ok) {\n        promiseResolveRef({\n          response: response\n        });\n      } else {\n        promiseRejectRef({\n          reason: \"Server error occurred.\",\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred.\",\n      response: err\n    });\n  });\n  return promise;\n};\nexport const modifyProduct = (requestJson, accessToken) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/products/' + requestJson.id, {\n    method: 'PUT',\n    body: JSON.stringify(requestJson),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.text().then(json => {\n      if (response.ok) {\n        promiseResolveRef({\n          message: \"Product \" + requestJson.name + \" modified successfully.\",\n          response: response\n        });\n      } else {\n        let message = json.message;\n        if (message === undefined || message === null) {\n          message = \"Server error occurred. Please try again.\";\n        }\n        promiseRejectRef({\n          reason: message,\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred. Please try again.\",\n      response: err\n    });\n  });\n  return promise;\n};\nexport const viewProduct = (id, accessToken) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/products/' + id, {\n    method: 'GET',\n    headers: {\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.json().then(json => {\n      if (response.ok) {\n        promiseResolveRef({\n          value: json,\n          response: response\n        });\n      } else {\n        promiseRejectRef({\n          reason: \"Server error occurred.\",\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred.\",\n      response: err\n    });\n  });\n  return promise;\n};","map":{"version":3,"names":["fetchAllProducts","accessToken","promiseResolveRef","promiseRejectRef","promise","Promise","resolve","reject","fetch","method","headers","then","response","json","ok","data","reason","catch","err","createProduct","requestJson","body","JSON","stringify","text","message","name","undefined","deleteProduct","id","modifyProduct","viewProduct","value"],"sources":["/Users/macbook/Downloads/upGrad-Eshop-Application-using-createreactapp/src/api/productAPIs.js"],"sourcesContent":["//Rest APIs for product\n\nexport const fetchAllProducts = (accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/products', {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tdata: json,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const createProduct = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/products', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tmessage: \"Product \" + requestJson.name + \" added successfully.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet message = json.message;\n\t\t\t\tif(message === undefined || message === null) {\n\t\t\t\t\tmessage = \"Server error occurred. Please try again.\";\n\t\t\t\t}\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const deleteProduct = (id, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/products/'+id, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then(() => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const modifyProduct = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/products/' + requestJson.id, {\n\t\tmethod: 'PUT',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tmessage: \"Product \" + requestJson.name + \" modified successfully.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet message = json.message;\n\t\t\t\tif(message === undefined || message === null) {\n\t\t\t\t\tmessage = \"Server error occurred. Please try again.\";\n\t\t\t\t}\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const viewProduct = (id, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/products/'+id, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tvalue: json,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}