{"ast":null,"code":"//Rest APIs for order\n\nexport const createOrder = (requestJson, accessToken) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('https://dev-project-ecommerce.upgrad.dev/api/orders', {\n    method: 'POST',\n    body: JSON.stringify(requestJson),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n      'x-auth-token': accessToken\n    }\n  }).then(response => {\n    response.text().then(() => {\n      if (response.ok) {\n        promiseResolveRef({\n          response: response\n        });\n      } else {\n        promiseRejectRef({\n          reason: \"Some error occurred. Please try again.\",\n          response: response\n        });\n      }\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Server error occurred. Please try again.\",\n      response: err\n    });\n  });\n  return promise;\n};","map":{"version":3,"names":["createOrder","requestJson","accessToken","promiseResolveRef","promiseRejectRef","promise","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","then","response","text","ok","reason","catch","err"],"sources":["/Users/macbook/Downloads/upGrad-Eshop-Application-using-createreactapp/src/api/orderAPIs.js"],"sourcesContent":["//Rest APIs for order\n\nexport const createOrder = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('https://dev-project-ecommerce.upgrad.dev/api/orders', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then(() => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Server error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,WAAW,GAAGA,CAACC,WAAW,EAAEC,WAAW,KAAK;EACxD;EACA;EACA,IAAIC,iBAAiB,GAAG,IAAI;EAC5B,IAAIC,gBAAgB,GAAG,IAAI;EAC3B,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC9CL,iBAAiB,GAAGI,OAAO;IAC3BH,gBAAgB,GAAGI,MAAM;EAC1B,CAAC,CAAC;EACFC,KAAK,CAAC,qDAAqD,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,WAAW,CAAC;IACjCa,OAAO,EAAE;MACR,cAAc,EAAE,iCAAiC;MACjD,cAAc,EAAEZ;IACjB;EACD,CAAC,CAAC,CAACa,IAAI,CAAEC,QAAQ,IAAK;IACrBA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAC,MAAM;MAC1B,IAAGC,QAAQ,CAACE,EAAE,EAAE;QACff,iBAAiB,CAAC;UACjBa,QAAQ,EAAEA;QACX,CAAC,CAAC;MACH,CAAC,MAAM;QACNZ,gBAAgB,CAAC;UAChBe,MAAM,EAAE,wCAAwC;UAChDH,QAAQ,EAAEA;QACX,CAAC,CAAC;MACH;IACD,CAAC,CAAC;EACH,CAAC,CAAC,CAACI,KAAK,CAAEC,GAAG,IAAK;IACjBjB,gBAAgB,CAAC;MAChBe,MAAM,EAAE,0CAA0C;MAClDH,QAAQ,EAAEK;IACX,CAAC,CAAC;EACH,CAAC,CAAC;EACF,OAAOhB,OAAO;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}