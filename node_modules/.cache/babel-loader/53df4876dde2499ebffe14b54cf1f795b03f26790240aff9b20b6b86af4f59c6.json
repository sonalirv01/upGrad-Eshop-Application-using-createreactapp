{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\n\n/**\n * Logs in a user and retrieves the x-auth-token from the response headers.\n * @param {string} email - The user's email.\n * @param {string} password - The user's password.\n * @returns {Promise<Object>} - A promise resolving to user details including the access token.\n */\nexport const doLogin = (email, password) => {\n  return new Promise((resolve, reject) => {\n    fetch(\"https://dev-project-ecommerce.upgrad.dev/api/auth/signin\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: email,\n        password: password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(async response => {\n      const token = response.headers.get(\"x-auth-token\"); // Extract token first\n\n      if (!token) {\n        return reject({\n          reason: \"Authentication failed. No token received.\",\n          response\n        });\n      }\n      try {\n        const json = await response.json();\n        if (response.ok) {\n          let decoded = jwt_decode(token);\n          resolve({\n            username: json.email,\n            accessToken: token,\n            accessTokenTimeout: decoded.exp * 1000,\n            // Convert to epoch\n            roles: json.roles,\n            userId: json.id,\n            response: response\n          });\n        } else {\n          reject({\n            reason: json.message || \"Server error occurred. Please try again.\",\n            response\n          });\n        }\n      } catch (error) {\n        reject({\n          reason: \"Failed to parse JSON response.\",\n          response: error\n        });\n      }\n    }).catch(err => reject({\n      reason: \"Network error occurred. Please try again.\",\n      response: err\n    }));\n  });\n};\n\n/**\n * Registers a new user.\n * @param {Object} requestJson - The user registration details.\n * @returns {Promise<Object>} - A promise resolving to the success message.\n */\nexport const doSignup = requestJson => {\n  return new Promise((resolve, reject) => {\n    fetch(\"https://dev-project-ecommerce.upgrad.dev/api/auth/signup\", {\n      method: \"POST\",\n      body: JSON.stringify(requestJson),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(async response => {\n      try {\n        const json = await response.json();\n        if (response.ok) {\n          resolve({\n            message: json.message,\n            response: response\n          });\n        } else {\n          reject({\n            reason: json.message || \"Server error occurred. Please try again.\",\n            response: response\n          });\n        }\n      } catch (error) {\n        reject({\n          reason: \"Failed to parse JSON response.\",\n          response: error\n        });\n      }\n    }).catch(err => reject({\n      reason: \"Network error occurred. Please try again.\",\n      response: err\n    }));\n  });\n};","map":{"version":3,"names":["jwt_decode","doLogin","email","password","Promise","resolve","reject","fetch","method","body","JSON","stringify","username","headers","then","response","token","get","reason","json","ok","decoded","accessToken","accessTokenTimeout","exp","roles","userId","id","message","error","catch","err","doSignup","requestJson"],"sources":["/Users/macbook/Downloads/upGrad-Eshop-Application-main/src/api/userAuthAPIs.js"],"sourcesContent":["import jwt_decode from \"jwt-decode\";\n\n/**\n * Logs in a user and retrieves the x-auth-token from the response headers.\n * @param {string} email - The user's email.\n * @param {string} password - The user's password.\n * @returns {Promise<Object>} - A promise resolving to user details including the access token.\n */\nexport const doLogin = (email, password) => {\n  return new Promise((resolve, reject) => {\n    fetch(\"https://dev-project-ecommerce.upgrad.dev/api/auth/signin\", {\n      method: \"POST\",\n      body: JSON.stringify({ username: email, password: password }),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then(async (response) => {\n        const token = response.headers.get(\"x-auth-token\"); // Extract token first\n\n        if (!token) {\n          return reject({ reason: \"Authentication failed. No token received.\", response });\n        }\n\n        try {\n          const json = await response.json();\n          if (response.ok) {\n            let decoded = jwt_decode(token);\n\n            resolve({\n              username: json.email,\n              accessToken: token,\n              accessTokenTimeout: decoded.exp * 1000, // Convert to epoch\n              roles: json.roles,\n              userId: json.id,\n              response: response,\n            });\n          } else {\n            reject({ reason: json.message || \"Server error occurred. Please try again.\", response });\n          }\n        } catch (error) {\n          reject({ reason: \"Failed to parse JSON response.\", response: error });\n        }\n      })\n      .catch((err) => reject({ reason: \"Network error occurred. Please try again.\", response: err }));\n  });\n};\n\n/**\n * Registers a new user.\n * @param {Object} requestJson - The user registration details.\n * @returns {Promise<Object>} - A promise resolving to the success message.\n */\nexport const doSignup = (requestJson) => {\n  return new Promise((resolve, reject) => {\n    fetch(\"https://dev-project-ecommerce.upgrad.dev/api/auth/signup\", {\n      method: \"POST\",\n      body: JSON.stringify(requestJson),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then(async (response) => {\n        try {\n          const json = await response.json();\n\n          if (response.ok) {\n            resolve({\n              message: json.message,\n              response: response,\n            });\n          } else {\n            reject({\n              reason: json.message || \"Server error occurred. Please try again.\",\n              response: response,\n            });\n          }\n        } catch (error) {\n          reject({ reason: \"Failed to parse JSON response.\", response: error });\n        }\n      })\n      .catch((err) => reject({ reason: \"Network error occurred. Please try again.\", response: err }));\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}